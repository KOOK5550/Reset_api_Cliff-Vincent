import axios from "axios";

const config = {
	KEY: "rsnai_hFaYFtodzuoSDREE2Ex3Zu32",
	KEY2: "rsnai_1MQfpO7qhSEvxVdb54sQMnnH"
};

const ApiUrl = "https://api.rsnai.org/api/v1/user/";
const RandomKey = ["nextchat_hFaYFtodzuoSDRCE2Ex3Zu32", "nextchat_f0l6u16v1zl80lkst3q5lhRq", "nextchat_qmHx1joaHxXl1zx0q4GADFJx", "nextchat_1MQfqO7qhSEvxVdb54sQMnnH", "nextchat_4g16uz049a85z703y538q705", "nextchat_g5crfz30a83p4kj6294gm475", "nextchat_XM2th5q1uPC7eB0Yn8WjZKrD", "nextchat_rpqSZpljhhqiK7IBbdJJ8zCr"];
const keys = [config.KEY, config.KEY2];
const Mainkey = keys[Math.floor(Math.random() * keys.length)];

class NextChat {
	constructor(apiKey) {
		if (!apiKey || !RandomKey.includes(apiKey)) {
			throw new Error(`Invalid API key. (Join the discord server and get the api key for free)`);
		}
		this.key = Mainkey;
	}

	async gemini(prompt) {
		try {
			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}gemini`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextChat Gemini: ${error}`);
		}
	}

  async openchat(prompt) {
		try {
			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}openchat`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextChat OpenChat: ${error}`);
		}
	}

	async gpt(prompt) {
		try {
			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}gpt4`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextChat GPT: ${error}`);
		}
	}

	async llama(prompt) {
		try {
			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}llama`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextChat LlaMa: ${error}`);
		}
	}

	async codellama(prompt) {
		try {
			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}codellama`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextChat CodeLlaMa: ${error}`);
		}
	}

  async bard(prompt) {
		try {
			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}bard`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextChat OpenChat: ${error}`);
		}
	}

	async mixtral(prompt) {
		try {
			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}mixtral`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextChat Mixtral: ${error}`);
		}
	}
}

class NextImage {
	constructor(apiKey) {
		if (!apiKey || !RandomKey.includes(apiKey)) {
			throw new Error(`Invalid API key. (Join the discord server and get the api key for free)`);
		}
		this.key = Mainkey;
	}

	async prodia(prompt, negative_prompt, model) {
		try {
			if (!prompt) return "No prompt provided.";
			if (!negative_prompt) return "No negative_prompt provided.";
			if (!model) return "No model provided.";

			const payload = { prompt, negative_prompt, model };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}prodia`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextImage Prodia: ${error}`);
		}
	}

	async dalle(prompt) {
		try {
			if (!prompt) return "No prompt provided.";

			const payload = { prompt };
			const authHeader = `Bearer ${this.key}`;
			const headers = { Authorization: authHeader };
			const response = await axios.post(`${ApiUrl}dalle`, payload, { headers });
			return response.data;
		} catch (error) {
			throw new Error(`NextImage Dalle: ${error}`);
		}
	}
}

export { NextChat, NextImage }